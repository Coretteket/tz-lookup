#!/usr/bin/env node

var fs       = require("fs"),
    Geometry = require("../lib/geometry"),
    path     = require("path"),
    zlib     = require("zlib"),
    WIDTH    = 96,
    HEIGHT   = 48,
    buckets  = new Array(WIDTH * HEIGHT),
    tzids    = [];

function rectangle(x, y) {
  var left   = (x + 0) * 360 / WIDTH - 180,
      top    = 90 - (y + 0) * 180 / HEIGHT,
      right  = (x + 1) * 360 / WIDTH - 180,
      bottom = 90 - (y + 1) * 180 / HEIGHT;

  return [left, bottom, right, top];
}

function canonicalize(poly) {
  var copy = new Array(poly.length),
      i, j;

  for(i = 0; i !== poly.length; ++i) {
    if(poly[i].length === 0)
      throw new Error("input was in an unexpected format");

    copy[i] = [];

    /* Flatten the input array. */
    for(j = 0; j !== poly[i].length; ++j) {
      /* Sanity check. */
      if(!Array.isArray(poly[i][j]) || poly[i][j].length !== 2)
        throw new Error("input was in an unexpected format");

      copy[i].push(poly[i][j][0], poly[i][j][1]);
    }

    /* Treat polygons as cyclic. */
    if(copy[i][0] === copy[i][copy[i].length - 2] &&
       copy[i][1] === copy[i][copy[i].length - 1])
      copy[i].length -= 2;

    /* Sanity check. */
    if(copy[i].length < 6)
      throw new Error("too few vertices for a polygon");
  }

  /* Remove holes (if applicable). */
  for(i = 1; i !== copy.length; ++i)
    copy[0] = Geometry.remove.polygon.polygon(copy[0], copy[i]);

  return copy[0];
}

function feature(feature) {
  if(!feature.properties ||
     !feature.properties.TZID ||
     !feature.geometry ||
     feature.geometry.type !== "Polygon" ||
     !feature.geometry.coordinates)
    throw new Error("invalid feature");

  var tzid = feature.properties.TZID;

  /* Skip uninhabited polygons entirely. */
  if(tzid === "uninhabited")
    return;

  var poly  = canonicalize(feature.geometry.coordinates),
      bbox  = Geometry.convert.polygon.box(poly),
      count = 0,
      x, y, rect;

  if(tzids.indexOf(tzid) === -1) {
    tzids.push(tzid);
    console.log(tzid);
  }

  for(y = 0; y !== HEIGHT; ++y) {
    for(x = 0; x !== WIDTH; ++x) {
      rect = rectangle(x, y);

      if(Geometry.overlap.box.box(bbox, rect) &&
         Geometry.overlap.polygon.box(poly, rect)) {
        if(!buckets[y * WIDTH + x])
          buckets[y * WIDTH + x] = {};

        if(!buckets[y * WIDTH + x][tzid])
          buckets[y * WIDTH + x][tzid] = [];

        buckets[y * WIDTH + x][tzid].push(poly);
        ++count;
      }
    }
  }

  if(count === 0)
    throw new Error(tzid + " didn't overlap any boxes (this is a bug)");
}

function collapse() {
  var i, key, can;

  loop: for(i = buckets.length; i--; ) {
    key = undefined;
    for(can in buckets[i])
      if(buckets[i].hasOwnProperty(can)) {
        if(key)
          continue loop;

        else
          key = can;
      }

    buckets[i] = key;
  }
}

function convertToBinary(data) {
  var len = 4,
      off = 0,
      buf, i, j, l;

  for(i = 0; i < data.length; i += 2)
    len += (4 + Buffer.byteLength(data[i], "utf8")) + (4 + data[i + 1].length * 4);

  buf = new Buffer(len);

  /* Write number of polygons. */
  buf.writeUInt32BE(data.length / 2, off);
  off += 4;

  /* For each poly... */
  for(i = 0; i < data.length; i += 2) {
    /* Write the TZ string. */
    l = Buffer.byteLength(data[i], "utf8");
    buf.writeUInt32BE(l, off);
    off += 4;
    buf.write(data[i], off, l, "utf8");
    off += l;

    /* Write the poly. */
    buf.writeUInt32BE(data[i + 1].length / 2, off);
    off += 4;

    for(j = 0; j < data[i + 1].length; j++) {
      buf.writeFloatBE(data[i + 1][j], off);
      off += 4;
    }
  }

  return buf;
}

fs.readFile(
  path.join(__dirname, "../data/tz_world.json.gz"),
  function(err, data) {
    if(err)
      throw err;

    zlib.gunzip(data, function(err, data) {
      if(err)
        throw err;

      /* Read the data into buckets. */
      var i;
      data = JSON.parse(data.toString("utf8")).features;
      for(i = 0; i !== data.length; ++i)
        feature(data[i]);
      tzids.sort();

      /* Write the results to disk. */
      i = buckets.length;
      function next(err) {
        var count, key, tzid, out, rect, j;

        if(err)
          throw err;

        while(i--) {
          if(!buckets[i])
            continue;

          count = 0;
          for(key in buckets[i])
            if(buckets[i].hasOwnProperty(key)) {
              tzid = key;
              ++count;
            }

          console.log("BUCKET %d COUNT %d", i, count);

          out  = [];
          rect = Geometry.convert.box.polygon(rectangle(i % WIDTH, Math.floor(i / WIDTH)));

          for(key in buckets[i])
            for(j = 0; j !== buckets[i][key].length; ++j)
              out.push(
                key,
                Geometry.clip.polygon.polygon(buckets[i][key][j], rect)
              );

          buckets[i] = "DISC";

          return fs.writeFile(
            path.join(__dirname, "../data", i + ".bin"),
            convertToBinary(out),
            next
          );
        }

        return zlib.gzip(
          JSON.stringify(buckets),
          function(err, data) {
            if(err)
              throw err;

            fs.writeFile(path.join(__dirname, "../data/metadata.json.gz"), data, function(err) {
              if(err)
                throw err;

              console.log("DONE");
            });
          }
        );
      }

      next();
    });
  }
);
