#!/usr/bin/env node

/* Final image should be 32768 * 16384. (That's big enough that the final image
 * has a single pixel for the smallest timezone, Vatican City.) Each pixel
 * needs to be a short since there are 400-something timezones. (Though, maybe
 * we can pack two pixels into 3 bytes or somesuch. Each pixel needs exactly 9
 * bits...)
 * 
 * That's 1GB, which is too big to be practical. Perhaps we can pack it into
 * tiles with a header and an offset index, with each tile compressed with
 * gzip. I should try varying tile sizes to compare compression ratios and
 * average read times. */

var fs              = require("fs"),
    path            = require("path"),
    zlib            = require("zlib"),
    /* Spherical geometry is expensive, and furthermore is unnecessary in this
     * case. We want points within 0.4 degrees (the average distance of
     * territorial waters) of the coast to be considered. This means too much
     * will be considered near the poles (but nobody lives there anyway) and
     * too little will be considered near the equator (but nobody who uses our
     * apps lives there anyway), but should be pretty close to accurate in
     * North America, Europe, and Australia. */
    MAX_DISTANCE_SQ = 0.16,
    TILES_ACROSS    = 384,
    TILES_DOWN      = 192,
    TILE_WIDTH      = 64,
    TILE_HEIGHT     = 64,
    WIDTH           = TILES_ACROSS * TILE_WIDTH,
    HEIGHT          = TILES_DOWN * TILE_HEIGHT;

function bound(poly) {
  var bound = [
        Number.POSITIVE_INFINITY,
        Number.POSITIVE_INFINITY,
        Number.NEGATIVE_INFINITY,
        Number.NEGATIVE_INFINITY
      ],
      i;

  for(i = poly.length; i--; ) {
    if(poly[i][0] < bound[0]) bound[0] = poly[i][0];
    if(poly[i][0] > bound[2]) bound[2] = poly[i][0];
    if(poly[i][1] < bound[1]) bound[1] = poly[i][1];
    if(poly[i][1] > bound[3]) bound[3] = poly[i][1];
  }

  return bound;
}

function area(poly) {
  var area = 0.0,
      a = poly[0],
      i, b;

  for(i = poly.length; i--; ) {
    b = a;
    a = poly[i];
    area += a[0] * b[1] - a[1] * b[0];
  }

  return Math.abs(area * 0.5);
}

function contains(polygon, lat, lon) {
  var a = polygon[0],
      t = false,
      i, b;

  for(i = polygon.length; i--; ) {
    b = a;
    a = polygon[i];

    if(((a[1] <= lat && lat < b[1]) || (b[1] <= lat && lat < a[1])) && ((lon - a[0]) < ((b[0] - a[0]) * (lat - a[1]) / (b[1] - a[1]))))
      t = !t;
  }

  return t;
}

/* This actually returns the distance squared. :p */
function line(lat, lon, a, b) {
  var x = b[0] - a[0],
      y = b[1] - a[1],
      u;

  if(x === 0.0 && y === 0.0) {
    x = a[0];
    y = a[1];
  }

  else {
    u = ((lon - a[0]) * x + (lat - a[1]) * y) / (x * x + y * y);

    if(u <= 0.0) {
      x = a[0];
      y = a[1];
    }

    else if(u >= 1.0) {
      x = b[0];
      y = b[1];
    }

    else {
      x = a[0] + u * x;
      y = a[1] + u * y;
    }
  }

  x -= lon;
  y -= lat;
  return x * x + y * y;
}

function distance(lat, lon, polygon) {
  var distance = Number.POSITIVE_INFINITY,
      a = polygon[0],
      b, i, t;

  for(i = polygon.length; i--; ) {
    b = a;
    a = polygon[i];
    t = line(lat, lon, a, b);

    if(t < distance)
      distance = t;
  }

  return distance;
}

function Polygon(feature) {
  this.tzid = feature.properties.TZID;
  this.data = feature.geometry.coordinates;
  this.__boundingBox();
  this.__area();
}

Polygon.prototype = {
  __boundingBox: function() {
    this.box = bound(this.data[0]);
  },
  __area: function() {
    var i;

    this.area = area(this.data[0]);
    for(i = this.data.length; --i; )
      this.area -= area(this.data[i]);
  },
  overlap: function(that_box) {
    return this.box[0] <= that_box[2] && this.box[1] <= that_box[3] &&
           this.box[2] >= that_box[0] && this.box[3] >= that_box[1];
  },
  distance: function(lat, lon) {
    var i;

    /* Outside polygon: return distance to the edge. */
    if(!contains(this.data[0], lat, lon))
      return distance(lat, lon, this.data[0]);

    /* Inside polygon hole: return distance to hole's edge. */
    for(i = this.data.length; --i; )
      if(contains(this.data[i], lat, lon))
        return distance(lat, lon, this.data[i]);

    /* Inside polygon but outside all holes. */
    return 0.0;    
  }
};

function readGeoJSON(pathname, callback) {
  fs.readFile(pathname, function(err, data) {
    if(err)
      callback(err, null);

    else
      zlib.gunzip(data, function(err, data) {
        var i;

        if(err)
          callback(err, null);

        else {
          try {
            data = JSON.parse(data.toString("ascii"));
          }

          catch(err) {
            callback(err, null);
            return;
          }

          data = data.features;
          for(i = data.length; i--; )
            if(!data[i].properties ||
               !data[i].properties.TZID ||
               data[i].properties.TZID === "uninhabited")
              data.splice(i, 1);

            else
              data[i] = new Polygon(data[i]);

          data.sort(function(a, b) {
            return a.area - b.area;
          });

          callback(null, data);
        }
      });
  });
}

function tzindex(polygons) {
  var hash = {
        "Etc/GMT+12": -1, "Etc/GMT+11": -1, "Etc/GMT+10": -1, "Etc/GMT+9":  -1,
        "Etc/GMT+8":  -1, "Etc/GMT+7":  -1, "Etc/GMT+6":  -1, "Etc/GMT+5":  -1,
        "Etc/GMT+4":  -1, "Etc/GMT+3":  -1, "Etc/GMT+2":  -1, "Etc/GMT+1":  -1,
        "Etc/GMT":    -1, "Etc/GMT-1":  -1, "Etc/GMT-2":  -1, "Etc/GMT-3":  -1,
        "Etc/GMT-4":  -1, "Etc/GMT-5":  -1, "Etc/GMT-6":  -1, "Etc/GMT-7":  -1,
        "Etc/GMT-8":  -1, "Etc/GMT-9":  -1, "Etc/GMT-10": -1, "Etc/GMT-11": -1,
        "Etc/GMT-12": -1
      },
      list = [],
      i;

  for(i = polygons.length; i--; )
    hash[polygons[i].tzid] = -1;

  for(i in hash)
    if(hash.hasOwnProperty(i))
      list.push(i);

  list.sort();

  for(i = list.length; i--; )
    hash[list[i]] = i;

  return {list: list, hash: hash};
}

function internationalTzid(lon) {
  switch(Math.round((lon + 180) / 15)) {
    case  0: return "Etc/GMT+12";
    case  1: return "Etc/GMT+11";
    case  2: return "Etc/GMT+10";
    case  3: return "Etc/GMT+9";
    case  4: return "Etc/GMT+8";
    case  5: return "Etc/GMT+7";
    case  6: return "Etc/GMT+6";
    case  7: return "Etc/GMT+5";
    case  8: return "Etc/GMT+4";
    case  9: return "Etc/GMT+3";
    case 10: return "Etc/GMT+2";
    case 11: return "Etc/GMT+1";
    case 12: return "Etc/GMT";
    case 13: return "Etc/GMT-1";
    case 14: return "Etc/GMT-2";
    case 15: return "Etc/GMT-3";
    case 16: return "Etc/GMT-4";
    case 17: return "Etc/GMT-5";
    case 18: return "Etc/GMT-6";
    case 19: return "Etc/GMT-7";
    case 20: return "Etc/GMT-8";
    case 21: return "Etc/GMT-9";
    case 22: return "Etc/GMT-10";
    case 23: return "Etc/GMT-11";
    case 24: return "Etc/GMT-12";
  }
}

function cpsmap(list, filter, continuation) {
  var i   = list.length,
      map = new Array(i);

  function end() {
    continuation(null, map);
  }

  function next() {
    if(~--i)
      filter(list[i], function(err, data) {
        if(err)
          continuation(err, null);

        else {
          map[i] = data;
          next();
        }
      });

    else
      process.nextTick(end);
  }

  next();
}

readGeoJSON(path.join(__dirname, "tz_world.json.gz"), function(err, polygons) {
  if(err)
    throw err;

  var zones  = tzindex(polygons),
      index  = new Buffer(TILES_ACROSS * TILES_DOWN * 4),
      chunks = [],
      dx     = 360.0 / WIDTH,
      dy     = 180.0 / (HEIGHT - 1),
      box    = new Array(4),
      list   = [],
      x, y, data, u, v, i, j, lat, lon, bestPoly, bestDist, t, tzid;

  for(y = 0; y < TILES_DOWN; y++) {
    for(x = 0; x < TILES_ACROSS; x++) {
      box[0] = (x * TILE_WIDTH + 0) * dx - 180.0 - MAX_DISTANCE_SQ;
      box[1] = 90.0 - (y * TILE_HEIGHT + TILE_HEIGHT) * dy - MAX_DISTANCE_SQ;
      box[2] = (x * TILE_WIDTH + TILE_WIDTH) * dx - 180.0 + MAX_DISTANCE_SQ;
      box[3] = 90.0 - (y * TILE_HEIGHT + 0) * dy + MAX_DISTANCE_SQ;

      list.length = 0;
      for(i = polygons.length; i--; )
        if(polygons[i].overlap(box))
          list.push(polygons[i]);

      data = new Buffer(TILE_WIDTH * TILE_HEIGHT * 2);

      for(v = 0; v < TILE_HEIGHT; v++) {
        lat = 90.0 - (y * TILE_HEIGHT + v) * dy;

        for(u = 0; u < TILE_WIDTH; u++) {
          lon = (x * TILE_WIDTH + u) * dx - 180.0;

          bestPoly = null;
          bestDist = MAX_DISTANCE_SQ;

          for(i = list.length; i--; ) {
            box[0] = lon - bestDist;
            box[1] = lat - bestDist;
            box[2] = lon + bestDist;
            box[3] = lat + bestDist;
            if(!list[i].overlap(box))
              continue;

            t = list[i].distance(lat, lon);
            if(t >= bestDist)
              continue;

            bestPoly = list[i];
            bestDist = t;
          }

          tzid = bestPoly ? bestPoly.tzid : internationalTzid(lon);

          data.writeUInt16LE(zones.hash[tzid], (v * TILE_WIDTH + u) << 1);
        }
      }

      j = data.readUInt16LE(0);
      for(i = TILE_WIDTH * TILE_HEIGHT; i--; )
        if(data.readUInt16LE(i << 1) !== j)
          break;

      /* Every pixel is the same? Then write the index directly. */
      if(i === -1)
        index.writeUInt32LE((0xFFFF0000 | j) >>> 0, (y * TILES_ACROSS + x) << 2);

      /* Ooh, or not? Okay, we need to save the chunk. */
      else {
        index.writeUInt32LE(chunks.length, (y * TILES_ACROSS + x) << 2);
        chunks.push(data);
      }
    }
  }

  /* Compress every chunk with deflate. */
  cpsmap(chunks, zlib.deflate, function(err, chunks) {
    if(err)
      throw err;

    var i, offsets, off, max, header, tz;

    /* Compute the byte offset of each chunk. */
    offsets = new Array(chunks.length);
    offsets[0] = 0;
    for(i = 1; i < offsets.length; i++)
      offsets[i] = offsets[i - 1] + chunks[i - 1].length;

    for(i = TILES_ACROSS * TILES_DOWN; i--; ) {
      off = index.readUInt32LE(i << 2);
      if((off & 0xFFFF0000) !== -65536)
        index.writeUInt32LE(offsets[off], i << 2);
    }

    /* Compute the max length of an timezone string. */
    max = 0;
    for(i = zones.list.length; i--; ) {
      off = Buffer.byteLength(zones.list[i]);
      if(off > max)
        max = off;
    }

    /* Write the header. */
    header = new Buffer(12);
    header.writeUInt16LE(TILES_ACROSS, 0);
    header.writeUInt16LE(TILES_DOWN, 2);
    header.writeUInt16LE(TILE_WIDTH, 4);
    header.writeUInt16LE(TILE_HEIGHT, 6);
    header.writeUInt16LE(zones.list.length, 8);
    header.writeUInt16LE(max, 10);

    /* Write the timezone index. */
    tz = new Buffer(zones.list.length * max);
    tz.fill(0);
    for(i = zones.list.length; i--; )
      tz.write(zones.list[i], i * max, max, "ascii");

    process.stdout.write(header);
    process.stdout.write(index);
    process.stdout.write(tz);

    for(i = 0; i < chunks.length; i++)
      process.stdout.write(chunks[i]);
  });
});
